require "rake"
require "stringex"

#Reference Text for a new Post
referenceText = 
"You'll find this post in your `_posts` directory - edit this post and re-build (or run with the `-w` switch) to see your changes!
To add new posts, simply add a file in the `_posts` directory that follows the convention: YYYY-MM-DD-name-of-post.ext.

Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est tempora dicta iusto veniam officiis! Dolor, est, odit impedit neque 
ipsam sint aliquid numquam nostrum reprehenderit ad iure autem ea nulla! Lorem ipsum dolor sit amet, consectetur adipisicing elit. 
Labore, id, cum, dolores soluta sunt adipisci obcaecati facilis veniam ducimus sequi suscipit in placeat ullam consectetur vero 
deserunt at consequatur pariatur.

![Alt text](http://placehold.it/1150x350)

Jekyll also offers powerful support for code snippets:


{% highlight ruby linenos%}
def print_hi(name)
  puts \"Hi, \#{name}\"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll's GitHub repo][jekyll-gh].

[jekyll-gh]: https://github.com/mojombo/jekyll
[jekyll]:    http://jekyllrb.com
"

# Usage rake build for build an watch changes in Local
desc "Build site using Jekyll"
task :build do
  sh "jekyll serve -w"
end

# Usage rake commit_deploy['Your commit'] for automatic add,commit and push the modified files to Github 
# Source: http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/
desc "Commit _site/"
task :commit_deploy, :commitMsg do |t, args|
  commitMsg = args.commitMsg
  puts "\n## Staging modified files"
  status = system("git add -A")
  puts status ? "Success" : "Failed"
  puts "\n## Committing a site build at #{Time.now.utc}"
  message = "#{commitMsg}"
  status = system("git commit -m \"#{message}\"")
  puts status ? "Success" : "Failed"
  puts "\n## Pushing commits to remote"
  status = system("git push origin master")
  puts status ? "Success" : "Failed"
  Rake::Task[:deploy].execute
end

# Usage rake deploy for deplo local to remote server 
desc "Deploy Local to Server"
task :deploy do 
  sh "rsync -crz --delete \"_site/\" user@server:/dir/of/your/html_public"
end

# Usage rake new_post['my new post']
# Source http://octopress.com
desc "Begin a new post in _posts"
task :new_post, :title do |t, args|
  if args.title
    title = args.title
  else
    title = get_stdin("Enter a title for your post: ")
  end
  mkdir_p "_posts"
  filename = "_posts/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.markdown"
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end
  puts "Creating new post: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
    post.puts "author: "
    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}"
    post.puts "comments: true"
    post.puts "# Categories[diseno o desarrollo u opinion ]"
    post.puts "categories: []"
    post.puts "---"
    post.puts "#{referenceText}"
  end
end